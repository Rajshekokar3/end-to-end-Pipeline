1. Create an end to end ML pipeline (logging ,Exception etc)   (SPAM DETECTION PROJECT)
2. Automate the pipline using DVC (YAML ,crash course)
3. Adding configurable params to pipeline.
4. Experimen tracking using dvcline.
5. AWS setup with DVC for data versoning

Setiig up dvc pipeline (without params)
6> Create dvc.yamal and add stages to it.
6>dvc init then do "dvc repro" to test the piepline automation (Check dev dag)
7> Now git add ,commit,push

 setting up the dvc pipeline(with params)
 8> add params.yaml file
 9> Add the params setup (mentioned below)
 10> Do "dvc repro" again to test the pipeline along with the params
 11> Now git add, commit ,push


Experiments with  DVC:
12> pip install dvclive
13> Add the dvcline code block(mentioned below)
14> Do "dvc exp run", it will create a new dev.yaml(if already not there) and dvcline direcotry(each run will be considered as an exper)
15> DO "dvc exp show" on terminal to see the experiments or use extension on VS code(insall dvc extension)
16> DO "dvc exp remove "{exp-name}" to remove exp (optional) | "dvc exp apply {exp anem}" to reproduce pre exp
17> Change parmas, re run code (produce new experiments)
18> Now git add ,commit ,push 






 -----------------------------------------------------------------------------------
 params.yamal setup 
 1> import yaml
 2> add func:
 def load_params(params_path:str)-> dict:
    """ LOad parameters from YAML file. """
    try:
        with open(params_path,'r') as file:
            params=yaml.safe_load(file)
        logger.debug("Parameters retrieved from %s", params_path)
        return params
    except FileNotFoundError:
        logger.error("File not found: %s",e)
        raise
    except Exception as e:
        logger.error("Unexcepted error: %s",e)
        raise
3>Add to main():
data ingestion
    params=load_params(params_path='params.yaml')
    test_size=params['data_ingestion']['test_size']


-------------------------------------------------------------------------------
dvclive code block:
1> import dvclive and yaml:
from dvclive import Live
import yaml
2> Add the load _paramsfunction and initiate "params" var in main
3> Add below code blow to main:
with Live(save_dvc_exp=True) as live:
    live.log_metric('accuracy',accuracy_score(y_test,y_test))
    live.log_metric('precision',precision_score(y_test,y_test))
    live.log_metric('recall',recall_score(y_test,y_test))

    live_log_params(params)







#dvc repro is use for reproducing pipline 
